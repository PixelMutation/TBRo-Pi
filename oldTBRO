prevTime=time.time()

while True:
	try:
		raw, addr = receive_socket.recvfrom(SIZE)
		data = raw.decode()
		print(data)
		# Press Q in mission control to kill this program
		if "QUIT_ROVER" in str(data):
			print("\nQUITTING")
			break
		else:
			data = json.loads(data)

			if 'CAM_PAN' in data:
				pan_change=(data['CAM_PAN']*-1)
			if 'CAM_TILT' in data:
				tilt_change=(data['CAM_TILT']*1)
			if 'CAM_CENTRE' in data:
				pan=0
				tilt=0
			if 'DRIVE' in data:
				s.write(('W'+str(int(data['DRIVE']))+'\n').encode())
			if 'TURN' in data:
				s.write(('X'+str(int(data['TURN']))+'\n').encode())
			if 'ROLL_R' in data:
				s.write(('D'+str(int(data['ROLL_R']))+'\n').encode())
			if 'ROLL_L' in data:
				s.write(('A'+str(int(data['ROLL_L']))+'\n').encode())
	except:
		pass
	if time.time()-prevTime>0.005:
		prevTime=time.time()
		pan+=pan_change
		tilt+=tilt_change
		pan=constrain(pan,-90,90)
		tilt=constrain(tilt,-90,90)
		#pantilthat.pan(pan_change*90)
		#pantilthat.tilt(tilt_change*90)
		pantilthat.pan(pan)
		pantilthat.tilt(tilt)
	try:
		if s.in_waiting >0:
			serialstring=s.readline()
			print("ARDUINO: ",serialstring.decode("Ascii"))
	except:
		try:
			s.open()
		except:
			pass

